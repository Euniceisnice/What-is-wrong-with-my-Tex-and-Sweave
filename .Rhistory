library(knitr)
Sweave2knitr('Causal_Inference_HW1_Eunice_Wu.Rnw')
Sweave2knitr('Causal_Inference_HW1_Eunice_Wu.Rnw')
Sweave2knitr('Causal_Inference_HW1_Eunice_Wu.Rnw')
Sweave2knitr('Causal_Inference_HW1_Eunice_Wu.Rnw')
?Sweave2knitr
\tikzstyle{bag} = [text width=2em, text centered]
\tikzstyle{end} = []
\begin{tikzpicture}[sloped]
\node (a) at ( 0,0) [bag] {$S_0$ \\ $f$};
\node (c) at (4,-1) [bag] {$S_0d$ \\  $f_d$} ;
\node (b) at (4,1) [bag] {$S_0u$ \\  $f_u$};
\node (d) at (12,3) [bag]  [text width=12em] {$S_0u^2$ \\ $f_{u^2} = max(0, S_T-K)$};
\node (e) at (12,0) [bag] [text width=12em] {$S_0ud$ \\ $f_{ud} = max(0, S_T-K)$};
\node (f) at (12,-3) [bag] [text width=12em] {$S_0d^2$ \\ $f_{dd} = max(0, S_T-K)$};
\draw [->] (a) to node [above] {$p$} (b);
\draw [->] (a) to node [below] {$(1-p)$} (c);
\draw [->] (c) to node [below] {$(1-p)$} (f);
\draw [->] (c) to node [above] {$p$} (e);
\draw [->] (b) to node [below] {$(1-p)$} (e);
\draw [->] (b) to node [above] {$p$} (d);
\end{tikzpicture}
#\tikzstyle{bag} = [text width=2em, text centered]
#\tikzstyle{end} = []
#\begin{tikzpicture}[sloped]
\node (a) at ( 0,0) [bag] {$S_0$ \\ $f$};
\node (c) at (4,-1) [bag] {$S_0d$ \\  $f_d$} ;
\node (b) at (4,1) [bag] {$S_0u$ \\  $f_u$};
\node (d) at (12,3) [bag]  [text width=12em] {$S_0u^2$ \\ $f_{u^2} = max(0, S_T-K)$};
\node (e) at (12,0) [bag] [text width=12em] {$S_0ud$ \\ $f_{ud} = max(0, S_T-K)$};
\node (f) at (12,-3) [bag] [text width=12em] {$S_0d^2$ \\ $f_{dd} = max(0, S_T-K)$};
\draw [->] (a) to node [above] {$p$} (b);
\draw [->] (a) to node [below] {$(1-p)$} (c);
\draw [->] (c) to node [below] {$(1-p)$} (f);
\draw [->] (c) to node [above] {$p$} (e);
\draw [->] (b) to node [below] {$(1-p)$} (e);
\draw [->] (b) to node [above] {$p$} (d);
#\end{tikzpicture}
install.packages("tikzDevice")
#\tikzstyle{bag} = [text width=2em, text centered]
#\tikzstyle{end} = []
#\begin{tikzpicture}[sloped]
\node (a) at ( 0,0) [bag] {$S_0$ \\ $f$};
\node (c) at (4,-1) [bag] {$S_0d$ \\  $f_d$} ;
\node (b) at (4,1) [bag] {$S_0u$ \\  $f_u$};
\node (d) at (12,3) [bag]  [text width=12em] {$S_0u^2$ \\ $f_{u^2} = max(0, S_T-K)$};
\node (e) at (12,0) [bag] [text width=12em] {$S_0ud$ \\ $f_{ud} = max(0, S_T-K)$};
\node (f) at (12,-3) [bag] [text width=12em] {$S_0d^2$ \\ $f_{dd} = max(0, S_T-K)$};
\draw [->] (a) to node [above] {$p$} (b);
\draw [->] (a) to node [below] {$(1-p)$} (c);
\draw [->] (c) to node [below] {$(1-p)$} (f);
\draw [->] (c) to node [above] {$p$} (e);
\draw [->] (b) to node [below] {$(1-p)$} (e);
\draw [->] (b) to node [above] {$p$} (d);
#\end{tikzpicture}
#%\tikzstyle{bag} = [text width=2em, text centered]
#%\tikzstyle{end} = []
#%\begin{tikzpicture}[sloped]
\node (a) at ( 0,0) [bag] {$S_0$ \\ $f$};
\node (c) at (4,-1) [bag] {$S_0d$ \\  $f_d$} ;
\node (b) at (4,1) [bag] {$S_0u$ \\  $f_u$};
\node (d) at (12,3) [bag]  [text width=12em] {$S_0u^2$ \\ $f_{u^2} = max(0, S_T-K)$};
\node (e) at (12,0) [bag] [text width=12em] {$S_0ud$ \\ $f_{ud} = max(0, S_T-K)$};
\node (f) at (12,-3) [bag] [text width=12em] {$S_0d^2$ \\ $f_{dd} = max(0, S_T-K)$};
\draw [->] (a) to node [above] {$p$} (b);
\draw [->] (a) to node [below] {$(1-p)$} (c);
\draw [->] (c) to node [below] {$(1-p)$} (f);
\draw [->] (c) to node [above] {$p$} (e);
\draw [->] (b) to node [below] {$(1-p)$} (e);
\draw [->] (b) to node [above] {$p$} (d);
#%\end{tikzpicture}
options(tikzDefaultEngine = 'xetex')
X1_sub_sample <- matrix(sample(X1, size = 5000 *6, replace = TRUE),6, 5000)
head(X1_sub_sample,5:6)
X1_sub_sample_mean = apply(X1_sub_sample, 2, mean)
#head(X1_sub_sample_mean)
X1_sub_sample_ci = apply(X1_sub_sample, 2, function(x) ci(x))
head(X1_sub_sample_ci,5:6)
sum(apply(X1_sub_sample_ci, 2, function(x){ifelse(x[2] < 5 & x[3] > 5,
TRUE, FALSE)}))
# Chunk 1
library("infer")
library("gmodels")
library("caTools")
library("dplyr")
# Chunk 2
N = 100
X <- cbind(matrix(1:1, ncol = 1, nrow = N),  matrix(rpois(N, 5), ncol = 1),
matrix(rpois(N, 10), ncol = 1))
head(X)
# Chunk 3
beta = c(1,2,3)
epsilon = matrix(rnorm(N, mean=0, sd=1), ncol = 1)
beta
head(epsilon)
Y = X %*% beta + epsilon
head(Y)
# Chunk 4
beta_est = solve(t(X) %*% X)  %*% t(X)  %*% Y
beta_est
# Chunk 5
coeff_lm <- lm(Y ~ X[,2]+X[,3])
summary(coeff_lm)
# Chunk 6
X1 <- matrix(rnorm(10000, mean = 5, sd = 1),ncol = 1)
X2 <- matrix(rpois(10000, 1),ncol = 1)
head(X1)
head(X2)
# Chunk 7
hist(X1)
abline(v = mean(X1), col = "yellow", lwd = 2)
# Chunk 8
hist(X2)
abline(v = mean(X2), col = "blue", lwd = 2)
X1_sub_sample <- matrix(sample(X1, size = 5000 *6, replace = TRUE),6, 5000)
head(X1_sub_sample,5:6)
X1_sub_sample_mean = apply(X1_sub_sample, 2, mean)
#head(X1_sub_sample_mean)
X1_sub_sample_ci = apply(X1_sub_sample, 2, function(x) ci(x))
head(X1_sub_sample_ci,5:6)
sum(apply(X1_sub_sample_ci, 2, function(x){ifelse(x[2] < 5 & x[3] > 5,
TRUE, FALSE)}))
?ci.lm
?ci
library("infer")
library("gmodels")
library("caTools")
library("dplyr")
library("tikzDevice")
# Chunk 1
library("infer")
library("gmodels")
library("caTools")
library("dplyr")
library("tikzDevice")
# Chunk 2
N = 100
X <- cbind(matrix(1:1, ncol = 1, nrow = N),  matrix(rpois(N, 5), ncol = 1),
matrix(rpois(N, 10), ncol = 1))
head(X)
# Chunk 3
beta = c(1,2,3)
epsilon = matrix(rnorm(N, mean=0, sd=1), ncol = 1)
beta
head(epsilon)
Y = X %*% beta + epsilon
head(Y)
# Chunk 4
beta_est = solve(t(X) %*% X)  %*% t(X)  %*% Y
beta_est
# Chunk 5
coeff_lm <- lm(Y ~ X[,2]+X[,3])
summary(coeff_lm)
# Chunk 6
X1 <- matrix(rnorm(10000, mean = 5, sd = 1),ncol = 1)
X2 <- matrix(rpois(10000, 1),ncol = 1)
head(X1)
head(X2)
# Chunk 7
hist(X1)
abline(v = mean(X1), col = "yellow", lwd = 2)
# Chunk 8
hist(X2)
abline(v = mean(X2), col = "blue", lwd = 2)
# Chunk 9
X1_sub_sample <- matrix(sample(X1, size = 5000 *6, replace = TRUE),6, 5000)
head(X1_sub_sample,5:6)
X1_sub_sample_mean = apply(X1_sub_sample, 2, mean)
#head(X1_sub_sample_mean)
X1_sub_sample_ci = apply(X1_sub_sample, 2, function(x) ci(x))
head(X1_sub_sample_ci,5:6)
sum(apply(X1_sub_sample_ci, 2, function(x){ifelse(x[2] < 5 & x[3] > 5,
TRUE, FALSE)}))
# Chunk 10
X2_sub_sample <- matrix(sample(X2, size = 5000 *6, replace = TRUE),6, 5000)
head(X2_sub_sample,5:6)
X2_sub_sample_mean = apply(X2_sub_sample, 2, mean)
X2_sub_sample_ci = apply(X2_sub_sample, 2, function(x) ci(x))
head(X2_sub_sample_ci,5:6)
sum(apply(X2_sub_sample_ci, 2, function(x){ifelse(x[2] < 1 & x[3] > 1,
TRUE, FALSE)}))
# Chunk 11
#X1 sampling
X1_size_6 = sum(apply(apply(matrix(sample(X1, size = 5000 *6, replace = TRUE),
6,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] <5 & x[3] > 5, TRUE, FALSE)}))
X1_size_20 = sum(apply(apply(matrix(sample(X1, size = 5000 *20, replace = TRUE),
20,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] < 5 & x[3] > 5, TRUE, FALSE)}))
X1_size_50 = sum(apply(apply(matrix(sample(X1, size = 5000 *50, replace = TRUE),
50,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] < 5 & x[3] > 5, TRUE, FALSE)}))
X1_size_500 = sum(apply(apply(matrix(sample(X1, size = 5000 *500, replace = TRUE),
500,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] < 5 & x[3] > 5, TRUE, FALSE)}))
X1_sampling <- data.frame("size = 6" = c(6, X1_size_6),
"size = 20" = c(20, X1_size_20),
"size = 50" = c(50, X1_size_50),
"size = 500" = c(500, X1_size_500))
X1_sampling
# Chunk 12
#X2 sampling
X2_size_6 = sum(apply(apply(matrix(sample(X2, size = 5000 *6, replace = TRUE),
6,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] < 1 & x[3] > 1, TRUE, FALSE)}))
X2_size_20 = sum(apply(apply(matrix(sample(X2, size = 5000 *20, replace = TRUE),
20,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] < 1 & x[3] > 1, TRUE, FALSE)}))
X2_size_50 = sum(apply(apply(matrix(sample(X2, size = 5000 *50, replace = TRUE),
50,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] < 1 & x[3] > 1, TRUE, FALSE)}))
X2_size_500 = sum(apply(apply(matrix(sample(X2, size = 5000 *500, replace = TRUE),
500,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] < 1 & x[3] > 1, TRUE, FALSE)}))
X2_sampling <- data.frame("size = 6" = c(6, X2_size_6),
"size = 20" = c(20, X2_size_20),
"size = 50" = c(50, X2_size_50),
"size = 500" = c(500, X2_size_500))
X2_sampling
# Chunk 13
logistic_regression <- glm(data = mtcars, am ~ hp + mpg, family = "binomial")
logistic_regression
summary(logistic_regression)
# Chunk 14
split <- sample.split(mtcars, SplitRatio = 0.8)
training_set <- subset(mtcars, split == "TRUE")
test_set <- subset(mtcars, split == "FALSE")
logistric_training_set <- glm(data = training_set, am ~ hp + mpg, family = "binomial")
res <- predict(logistric_training_set, training_set, type = "response")
confmatrix <- table(Actual_value = training_set$am, Predicted_value = res >0.5)
confmatrix
(confmatrix[[1,1]] + confmatrix[[2,2]]) / sum(confmatrix)
# Chunk 15
library(ISLR)
data(Smarket)
Smarket<- Smarket %>%
mutate(Direction = ifelse(Direction == "Up",1,0))
# Chunk 16
log_reg <- glm(data = Smarket, Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 +
Volume, family = "binomial")
summary(log_reg)
# Chunk 17
test_stock <- predict(log_reg, Smarket, type = "response")
summary(test_stock)
# Chunk 18
confmatrix_stock <- table(Actual_value = Smarket$Direction,
Predicted_value = test_stock >0.5)
confmatrix_stock
(confmatrix_stock[[1,1]] + confmatrix_stock[[2,2]]) / sum(confmatrix_stock)
# Chunk 19
Smarket_2004 <- Smarket %>%  filter(Year < 2005)
Smarket_2005 <- Smarket %>%  filter(Year > 2004)
log_reg_2004 <- glm(data = Smarket_2004, Direction ~
Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,
family = "binomial")
test_stock_2005 <- predict(log_reg_2004, Smarket_2005, type = "response")
confmatrix_stock <- table(Actual_value = Smarket_2005$Direction,
Predicted_value = test_stock_2005 >0.5)
confmatrix_stock
(confmatrix_stock[[1,1]] + confmatrix_stock[[2,2]]) / sum(confmatrix_stock)
# Chunk 1
library("infer")
library("gmodels")
library("caTools")
library("dplyr")
# Chunk 2
N = 100
X <- cbind(matrix(1:1, ncol = 1, nrow = N),  matrix(rpois(N, 5), ncol = 1),
matrix(rpois(N, 10), ncol = 1))
head(X)
# Chunk 3
beta = c(1,2,3)
epsilon = matrix(rnorm(N, mean=0, sd=1), ncol = 1)
beta
head(epsilon)
Y = X %*% beta + epsilon
head(Y)
# Chunk 4
beta_est = solve(t(X) %*% X)  %*% t(X)  %*% Y
beta_est
# Chunk 5
coeff_lm <- lm(Y ~ X[,2]+X[,3])
summary(coeff_lm)
# Chunk 6
X1 <- matrix(rnorm(10000, mean = 5, sd = 1),ncol = 1)
X2 <- matrix(rpois(10000, 1),ncol = 1)
head(X1)
head(X2)
# Chunk 7
hist(X1)
abline(v = mean(X1), col = "yellow", lwd = 2)
# Chunk 8
hist(X2)
abline(v = mean(X2), col = "blue", lwd = 2)
# Chunk 9
X1_sub_sample <- matrix(sample(X1, size = 5000 *6, replace = TRUE),6, 5000)
head(X1_sub_sample,5:6)
X1_sub_sample_mean = apply(X1_sub_sample, 2, mean)
#head(X1_sub_sample_mean)
X1_sub_sample_ci = apply(X1_sub_sample, 2, function(x) ci(x))
head(X1_sub_sample_ci,5:6)
sum(apply(X1_sub_sample_ci, 2, function(x){ifelse(x[2] < 5 & x[3] > 5,
TRUE, FALSE)}))
# Chunk 10
X2_sub_sample <- matrix(sample(X2, size = 5000 *6, replace = TRUE),6, 5000)
head(X2_sub_sample,5:6)
X2_sub_sample_mean = apply(X2_sub_sample, 2, mean)
X2_sub_sample_ci = apply(X2_sub_sample, 2, function(x) ci(x))
head(X2_sub_sample_ci,5:6)
sum(apply(X2_sub_sample_ci, 2, function(x){ifelse(x[2] < 1 & x[3] > 1,
TRUE, FALSE)}))
# Chunk 11
#X1 sampling
X1_size_6 = sum(apply(apply(matrix(sample(X1, size = 5000 *6, replace = TRUE),
6,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] <5 & x[3] > 5, TRUE, FALSE)}))
X1_size_20 = sum(apply(apply(matrix(sample(X1, size = 5000 *20, replace = TRUE),
20,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] < 5 & x[3] > 5, TRUE, FALSE)}))
X1_size_50 = sum(apply(apply(matrix(sample(X1, size = 5000 *50, replace = TRUE),
50,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] < 5 & x[3] > 5, TRUE, FALSE)}))
X1_size_500 = sum(apply(apply(matrix(sample(X1, size = 5000 *500, replace = TRUE),
500,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] < 5 & x[3] > 5, TRUE, FALSE)}))
X1_sampling <- data.frame("size = 6" = c(6, X1_size_6),
"size = 20" = c(20, X1_size_20),
"size = 50" = c(50, X1_size_50),
"size = 500" = c(500, X1_size_500))
X1_sampling
# Chunk 12
#X2 sampling
X2_size_6 = sum(apply(apply(matrix(sample(X2, size = 5000 *6, replace = TRUE),
6,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] < 1 & x[3] > 1, TRUE, FALSE)}))
X2_size_20 = sum(apply(apply(matrix(sample(X2, size = 5000 *20, replace = TRUE),
20,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] < 1 & x[3] > 1, TRUE, FALSE)}))
X2_size_50 = sum(apply(apply(matrix(sample(X2, size = 5000 *50, replace = TRUE),
50,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] < 1 & x[3] > 1, TRUE, FALSE)}))
X2_size_500 = sum(apply(apply(matrix(sample(X2, size = 5000 *500, replace = TRUE),
500,5000), 2, function(x) ci(x)), 2,
function(x){ifelse(x[2] < 1 & x[3] > 1, TRUE, FALSE)}))
X2_sampling <- data.frame("size = 6" = c(6, X2_size_6),
"size = 20" = c(20, X2_size_20),
"size = 50" = c(50, X2_size_50),
"size = 500" = c(500, X2_size_500))
X2_sampling
logistic_regression <- glm(data = mtcars, am ~ hp + mpg, family = "binomial")
logistic_regression
summary(logistic_regression)
split <- sample.split(mtcars, SplitRatio = 0.8)
training_set <- subset(mtcars, split == "TRUE")
test_set <- subset(mtcars, split == "FALSE")
logistric_training_set <- glm(data = training_set, am ~ hp + mpg, family = "binomial")
res <- predict(logistric_training_set, training_set, type = "response")
confmatrix <- table(Actual_value = training_set$am, Predicted_value = res >0.5)
confmatrix
(confmatrix[[1,1]] + confmatrix[[2,2]]) / sum(confmatrix)
library(ISLR)
data(Smarket)
Smarket<- Smarket %>%
mutate(Direction = ifelse(Direction == "Up",1,0))
log_reg <- glm(data = Smarket, Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 +
Volume, family = "binomial")
summary(log_reg)
test_stock <- predict(log_reg, Smarket, type = "response")
summary(test_stock)
confmatrix_stock <- table(Actual_value = Smarket$Direction,
Predicted_value = test_stock >0.5)
confmatrix_stock
(confmatrix_stock[[1,1]] + confmatrix_stock[[2,2]]) / sum(confmatrix_stock)
Smarket_2004 <- Smarket %>%  filter(Year < 2005)
Smarket_2005 <- Smarket %>%  filter(Year > 2004)
log_reg_2004 <- glm(data = Smarket_2004, Direction ~
Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,
family = "binomial")
test_stock_2005 <- predict(log_reg_2004, Smarket_2005, type = "response")
confmatrix_stock <- table(Actual_value = Smarket_2005$Direction,
Predicted_value = test_stock_2005 >0.5)
confmatrix_stock
(confmatrix_stock[[1,1]] + confmatrix_stock[[2,2]]) / sum(confmatrix_stock)
